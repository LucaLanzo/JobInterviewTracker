import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'maven-publish'
}

group = 'com.lucalanzo'
version = getVersion()

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MongoDB driver
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-webflux'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

jar {
    enabled = false
}


publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/lucalanzo/jobinterviewtracker")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        mavenJava(MavenPublication) {
            from(components.java)

            artifactId 'job-interview-tracker-backend'
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

static def getVersion() {
    def gitDescribeOutput = ""
    if (OperatingSystem.current().isWindows()) {
        gitDescribeOutput = 'git describe --tags --abbrev=0'.execute().text.trim()

    } else {
        gitDescribeOutput = ['git', 'describe', '--tags', '--abbrev=0'].execute().text.trim()
    }

    println(gitDescribeOutput)

    if (gitDescribeOutput) {
        return gitDescribeOutput
    } else {
        return "v.0.1" // fallback version
    }
}